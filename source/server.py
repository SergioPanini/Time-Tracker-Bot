import logging
import os
import typing
from datetime import datetime

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import reply_keyboard
from aiogram.types.message import Message
from messages import START_MESSAGE

from db import add_user, add_activity, get_user_activities, start_activity, stop_activity, show_all, get_stat
from services import get_activities_console, get_static_keyboard, DontShowPage


TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
logging.basicConfig(level=logging.INFO)

bot = Bot(TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)

set_activety_user_dict = {}


@dp.message_handler(commands=['start', 'help'])
async def send_walcome(message: types.Message):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'''

    add_user(message.chat.id)
    
    user_activities = get_user_activities(message.chat.id)
    print('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', user_activities)
    start_keyboard = get_activities_console(message.chat.id)
    static_keyboard = get_static_keyboard()

    await message.answer('üñêüèª', reply_markup=static_keyboard)
    await message.answer(START_MESSAGE, reply_markup=start_keyboard)


@dp.message_handler(commands=['console'])
async def show_main_console(message: types.Message):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Å–æ–ª—å'''
    await message.answer(text='–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º', reply_markup=get_activities_console(message.chat.id))

#@dp.callback_query_handler(lambda callback_query: callback_query.data.split(':')[0] in ['START', 'STOP'])
#async await

@dp.callback_query_handler(lambda callback_query: callback_query.data.split(':')[0] in ['<', '>'] )
async def main_comsole_move(callback_query: types.CallbackQuery):
    '''–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –∫–æ–Ω—Å–æ–ª–∏'''

    #–ü–æ–ª—É—á–∞–µ–º  –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å 
    page = callback_query.data.split(':')[1]
    
    try:
        #–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        new_keyboard = get_activities_console(callback_query.message.chat.id, int(page))
        await callback_query.message.edit_reply_markup(new_keyboard)
        await callback_query.answer('–ì–æ—Ç–æ–≤–æ')

    except DontShowPage:
        await callback_query.answer('–ë–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π')

@dp.callback_query_handler(lambda callback_query: callback_query.data == "Add_new_activities")
async def activety_select(callback_query: types.CallbackQuery):
    '''Callback –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'''

    await bot.send_message(chat_id=callback_query.message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
    await callback_query.answer('–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    set_activety_user_dict[callback_query.message.chat.id] = True

@dp.callback_query_handler(lambda callback_query: callback_query.data.split(':')[0] in ['‚úÖ START', '‚õîÔ∏è STOP'])
async def start_stop_activities(callback_query: types.CallbackQuery):
    '''–í–∫–ª—é—á–∞–µ—Ç –∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'''

    #–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è(–Ω–∞—á–∞—Ç—å –∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å)
    command, activity = callback_query.data.split(':')

    if command == "‚úÖ START":
        start_activity(callback_query.message.chat.id, activity)
    
    else:
        stop_activity(callback_query.message.chat.id, activity)
    
    #–ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Å–æ–ª—å
    updated_keyboard = get_activities_console(callback_query.message.chat.id,\
         _get_actual_page(callback_query.message.reply_markup.inline_keyboard))
    
    #–ú–µ–Ω—è–µ–º –∫–æ–Ω—Å–æ–ª—å –∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.message.edit_reply_markup(updated_keyboard)
    await callback_query.answer(text="–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

def _get_actual_page(inline_keyboard: list) -> int:
    '''–ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü–∏ –∫–æ–Ω—Å–æ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'''

    inline_keyboard_last_row = inline_keyboard[-1]
    next_button = inline_keyboard_last_row[1]
    next_page = next_button.callback_data.split(':')[1]
    
    return int(next_page) - 1

@dp.message_handler(commands=['stat'])
async def get_stat_user(message: types.Message):
    '''–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''

    message.answer(text='–ú–ú–ú–ú, —è —Å—Ç–∏—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–∫–∞ –Ω–µ —É–º–µ—é, —Ä–∞–∑—Ä–∞–± –Ω–µ –¥–æ–ø–∏–ª–∏–ª —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª üë®üèª‚Äçüíª')

@dp.message_handler()
async def set_activety(message: types.Message):
    '''–ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥'''

    if set_activety_user_dict.get(message.chat.id) == True:
        set_activety_user_dict[message.chat.id] = False
        await message.answer(text='–ó–∞–ø–æ–º–Ω–∏–ª %s' % message.text)

        add_activity(chat_id=message.chat.id, activity=message.text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
